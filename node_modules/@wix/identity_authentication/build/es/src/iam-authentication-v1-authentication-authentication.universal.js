import { transformError as sdkTransformError } from '@wix/sdk-runtime/transform-error';
import { renameKeysFromSDKRequestToRESTRequest, renameKeysFromRESTResponseToSDKResponse, } from '@wix/sdk-runtime/rename-all-nested-keys';
import * as ambassadorWixIamAuthenticationV1Authentication from './iam-authentication-v1-authentication-authentication.http.js';
import { transformSDKAddressToRESTAddress } from '@wix/sdk-runtime/transformations/address';
import { transformRESTAddressToSDKAddress } from '@wix/sdk-runtime/transformations/address';
import { transformPaths } from '@wix/sdk-runtime/transformations/transform-paths';
export var PrivacyStatus;
(function (PrivacyStatus) {
    PrivacyStatus["UNDEFINED"] = "UNDEFINED";
    PrivacyStatus["PUBLIC"] = "PUBLIC";
    PrivacyStatus["PRIVATE"] = "PRIVATE";
})(PrivacyStatus || (PrivacyStatus = {}));
export var EmailTag;
(function (EmailTag) {
    EmailTag["UNTAGGED"] = "UNTAGGED";
    EmailTag["MAIN"] = "MAIN";
    EmailTag["HOME"] = "HOME";
    EmailTag["WORK"] = "WORK";
})(EmailTag || (EmailTag = {}));
export var PhoneTag;
(function (PhoneTag) {
    PhoneTag["UNTAGGED"] = "UNTAGGED";
    PhoneTag["MAIN"] = "MAIN";
    PhoneTag["HOME"] = "HOME";
    PhoneTag["MOBILE"] = "MOBILE";
    PhoneTag["WORK"] = "WORK";
    PhoneTag["FAX"] = "FAX";
})(PhoneTag || (PhoneTag = {}));
export var AddressTag;
(function (AddressTag) {
    AddressTag["UNTAGGED"] = "UNTAGGED";
    AddressTag["HOME"] = "HOME";
    AddressTag["WORK"] = "WORK";
    AddressTag["BILLING"] = "BILLING";
    AddressTag["SHIPPING"] = "SHIPPING";
})(AddressTag || (AddressTag = {}));
export var StateType;
(function (StateType) {
    /** Initial unknown state. */
    StateType["UNKNOWN_STATE"] = "UNKNOWN_STATE";
    /** The operation completed successfully. */
    StateType["SUCCESS"] = "SUCCESS";
    /** State that indicates that the member needs owner approval to proceed, available action in: OwnerApprovalStateHandler */
    StateType["REQUIRE_OWNER_APPROVAL"] = "REQUIRE_OWNER_APPROVAL";
    /**
     * State that indicates a member waiting for verification, available action are: verifyDuringAuthentication or resendDuringAuthentication
     * https://dev.wix.com/docs/rest/api-reference/auth-management/verification-v1/verify-during-authentication
     */
    StateType["REQUIRE_EMAIL_VERIFICATION"] = "REQUIRE_EMAIL_VERIFICATION";
    /** State that indicates checking that the status is not one of the `invalidStates` before proceeding. */
    StateType["STATUS_CHECK"] = "STATUS_CHECK";
})(StateType || (StateType = {}));
export var StatusName;
(function (StatusName) {
    StatusName["UNKNOWN_STATUS"] = "UNKNOWN_STATUS";
    StatusName["PENDING"] = "PENDING";
    StatusName["ACTIVE"] = "ACTIVE";
    StatusName["DELETED"] = "DELETED";
    StatusName["BLOCKED"] = "BLOCKED";
    StatusName["OFFLINE"] = "OFFLINE";
})(StatusName || (StatusName = {}));
export var Reason;
(function (Reason) {
    Reason["UNKNOWN_REASON"] = "UNKNOWN_REASON";
    Reason["PENDING_ADMIN_APPROVAL_REQUIRED"] = "PENDING_ADMIN_APPROVAL_REQUIRED";
    Reason["PENDING_EMAIL_VERIFICATION_REQUIRED"] = "PENDING_EMAIL_VERIFICATION_REQUIRED";
})(Reason || (Reason = {}));
export var FactorType;
(function (FactorType) {
    FactorType["UNKNOWN_FACTOR_TYPE"] = "UNKNOWN_FACTOR_TYPE";
    FactorType["PASSWORD"] = "PASSWORD";
    FactorType["SMS"] = "SMS";
    FactorType["CALL"] = "CALL";
    FactorType["EMAIL"] = "EMAIL";
    FactorType["TOTP"] = "TOTP";
    FactorType["PUSH"] = "PUSH";
})(FactorType || (FactorType = {}));
export var Status;
(function (Status) {
    /** Factor requires activation. */
    Status["INACTIVE"] = "INACTIVE";
    /** Factor is active and can be used for authentication. */
    Status["ACTIVE"] = "ACTIVE";
    /** Factor is blocked and cannot be used for authentication. The user should reenroll the factor. */
    Status["REQUIRE_REENROLL"] = "REQUIRE_REENROLL";
})(Status || (Status = {}));
export var TenantType;
(function (TenantType) {
    TenantType["UNKNOWN_TENANT_TYPE"] = "UNKNOWN_TENANT_TYPE";
    TenantType["ACCOUNT"] = "ACCOUNT";
    TenantType["SITE"] = "SITE";
    TenantType["ROOT"] = "ROOT";
})(TenantType || (TenantType = {}));
/**
 * Registers a new member.
 *
 * Typically, after a sucessful registration, you generate and use member tokens for the
 * registered member so that subsequent API calls are called as part of a member session.
 *
 * If the email used to register the member already exists as a contact email, the registering
 * member need to verify the email address using a code that is sent to the address.
 * @param loginId - Identifier of registering member.
 * @public
 * @documentationMaturity preview
 * @requiredField loginId
 */
export async function registerV2(loginId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        loginId: loginId,
        password: options?.password,
        profile: options?.profile,
        captchaTokens: options?.captchaTokens,
        clientMetaData: options?.clientMetaData,
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'profile.addresses.address' }],
        },
    ]);
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.registerV2(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                loginId: '$[0]',
                password: '$[1].password',
                profile: '$[1].profile',
                captchaTokens: '$[1].captchaTokens',
                clientMetaData: '$[1].clientMetaData',
            },
            singleArgumentUnchanged: false,
        }, ['loginId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Logs in an existing user.
 *
 * Typically, after a sucessful login, you generate and use member tokens for the
 * logged-in member so that subsequent API calls are called as part of a member session.
 * @param loginId - Identifier of identity logging in.
 * @public
 * @documentationMaturity preview
 * @requiredField loginId
 */
export async function loginV2(loginId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        loginId: loginId,
        password: options?.password,
        captchaTokens: options?.captchaTokens,
        clientMetaData: options?.clientMetaData,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.loginV2(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                loginId: '$[0]',
                password: '$[1].password',
                captchaTokens: '$[1].captchaTokens',
                clientMetaData: '$[1].clientMetaData',
            },
            singleArgumentUnchanged: false,
        }, ['loginId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Changes the password of a logged in user.
 * @param newPassword - The new password to set for the logged in user
 * @public
 * @documentationMaturity preview
 * @requiredField newPassword
 * @permissionId IAM.CHANGE_PASSWORD
 */
export async function changePassword(newPassword) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        newPassword: newPassword,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.changePassword(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: { newPassword: '$[0]' },
            singleArgumentUnchanged: false,
        }, ['newPassword']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @public
 * @documentationMaturity preview
 */
export async function loginCallback(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        state: options?.state,
        sessionToken: options?.sessionToken,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.loginCallback(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                state: '$[0].state',
                sessionToken: '$[0].sessionToken',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @param loginId - the identifier of the identity
 * @public
 * @documentationMaturity preview
 * @requiredField loginId
 * @permissionId IAM.AUTHENTICAITON_SIGN_ON
 * @permissionScope Manage Members Authentication
 * @permissionScopeId SCOPE.DC-IDENTITY.MANAGE_AUTHENTICATION
 * @applicableIdentity APP
 */
export async function signOn(loginId, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = transformPaths(renameKeysFromSDKRequestToRESTRequest({
        loginId: loginId,
        profile: options?.profile,
        verifyEmail: options?.verifyEmail,
        mergeExistingContact: options?.mergeExistingContact,
    }), [
        {
            transformFn: transformSDKAddressToRESTAddress,
            paths: [{ path: 'profile.addresses.address' }],
        },
    ]);
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.signOn(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                loginId: '$[0]',
                profile: '$[1].profile',
                verifyEmail: '$[1].verifyEmail',
                mergeExistingContact: '$[1].mergeExistingContact',
            },
            singleArgumentUnchanged: false,
        }, ['loginId', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/**
 * Logs out a member.
 * @public
 * @documentationMaturity preview
 */
export async function logout(options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[1];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        postLogoutRedirectUri: options?.postLogoutRedirectUri,
        clientId: options?.clientId,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.logout(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(result.data);
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                postLogoutRedirectUri: '$[0].postLogoutRedirectUri',
                clientId: '$[0].clientId',
            },
            singleArgumentUnchanged: false,
        }, ['options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
/** @public
 * @documentationMaturity preview
 * @requiredField factorType
 */
export async function verify(factorType, options) {
    // @ts-ignore
    const { httpClient, sideEffects } = arguments[2];
    const payload = renameKeysFromSDKRequestToRESTRequest({
        factorType: factorType,
        stateToken: options?.stateToken,
        rememberThisDevice: options?.rememberThisDevice,
        smsData: options?.smsData,
        callData: options?.callData,
        emailData: options?.emailData,
        totpData: options?.totpData,
        pushData: options?.pushData,
    });
    const reqOpts = ambassadorWixIamAuthenticationV1Authentication.verify(payload);
    sideEffects?.onSiteCall?.();
    try {
        const result = await httpClient.request(reqOpts);
        sideEffects?.onSuccess?.(result);
        return renameKeysFromRESTResponseToSDKResponse(transformPaths(result.data, [
            {
                transformFn: transformRESTAddressToSDKAddress,
                paths: [{ path: 'identity.identityProfile.addresses.address' }],
            },
        ]));
    }
    catch (err) {
        const transformedError = sdkTransformError(err, {
            spreadPathsToArguments: {},
            explicitPathsToArguments: {
                factorType: '$[0]',
                stateToken: '$[1].stateToken',
                rememberThisDevice: '$[1].rememberThisDevice',
                smsData: '$[1].smsData',
                callData: '$[1].callData',
                emailData: '$[1].emailData',
                totpData: '$[1].totpData',
                pushData: '$[1].pushData',
            },
            singleArgumentUnchanged: false,
        }, ['factorType', 'options']);
        sideEffects?.onError?.(err);
        throw transformedError;
    }
}
//# sourceMappingURL=iam-authentication-v1-authentication-authentication.universal.js.map
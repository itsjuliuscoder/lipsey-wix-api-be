type Primitive = number | string | boolean | bigint | symbol | null | undefined;
type Tags = Record<string, Primitive>;
type Context = Record<string, unknown>;
type Contexts = Record<string, Context | undefined>;

/**
 * Represents the context for host monitoring.
 */
interface HostMonitoringContext {
    /**
     * The unique identifier for the application.
     */
    appId: string;
    /**
     * The version of the application.
     */
    appVersion: string;
    /**
     * The unique identifier for the application instance.
     */
    appInstanceId: string;
    /**
     * The unique identifier for the extension.
     */
    extensionId?: string;
    /**
     * The name of the extension.
     */
    extensionName?: string;
    /**
     * The platform the extension is on. (e.g. 'dashboard', 'editor', 'site', 'backend)
     */
    extensionPlatform?: string;
    /**
     * The type of the extension on the platform. (e.g. backend: ['api', 'events], dashboard: ['widget', 'page'], site: ['component', 'widget'])
     */
    extensionType?: string;
    /**
     * Additional data related to the extension.
     */
    extensionData?: Record<string, unknown>;
    /**
     * The type of the subject.
     * Can be 'USER', 'MEMBER', or 'VISITOR'.
     */
    subjectType?: 'USER' | 'MEMBER' | 'VISITOR';
    /**
     * The unique identifier for the subject.
     */
    subjectId?: string;
    /**
     * The type of the tenant.
     * Can be 'ACCOUNT' or 'SITE'.
     */
    tenantType?: 'ACCOUNT' | 'SITE';
    /**
     * The unique identifier for the tenant.
     */
    tenantId?: string;
    /**
     * The URL of the site.
     */
    siteUrl?: string;
}

interface SpanContextData {
    traceId: string;
    spanId: string;
}
interface Span {
    spanContext(): SpanContextData;
    end(): void;
}
interface SpanOptions {
    name: string;
    tags?: Tags;
}
interface Breadcrumb {
    type?: string;
    category?: string;
    message: string;
    level?: 'info' | 'warning' | 'error';
    data?: Record<string, unknown>;
}
interface CaptureContext {
    level?: 'info' | 'warning' | 'error';
    tags?: Tags;
    contexts?: Contexts;
}
interface MonitoringClient {
    captureException(error: unknown, context?: CaptureContext): void;
    captureMessage(message: string, context?: CaptureContext): void;
    startSpan<T>(options: SpanOptions, callback: (span: Span | undefined) => T): T;
    addBreadcrumb(breadcrumb: Breadcrumb): void;
}

interface EventTags extends Tags {
    'app.id': string;
    'app.version': string;
    'app.instanceId': string;
    'extension.id'?: string;
    'extension.name'?: string;
    'extension.platform'?: string;
    'extension.type'?: string;
}
interface EventContexts extends Contexts {
    extension?: {
        type?: string;
        data?: Record<string, unknown>;
    };
    identity?: {
        type?: string;
        id?: string;
    };
    site?: {
        url?: string;
        id?: string;
    };
    account?: {
        id?: string;
    };
}
interface EventData {
    tags: EventTags;
    contexts: EventContexts;
}

export type { Breadcrumb, CaptureContext, Context, Contexts, EventContexts, EventData, EventTags, HostMonitoringContext, MonitoringClient, Primitive, Span, SpanContextData, SpanOptions, Tags };
